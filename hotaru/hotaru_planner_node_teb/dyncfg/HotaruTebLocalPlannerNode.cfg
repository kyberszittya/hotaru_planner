#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()
gen.add("debug", bool_t, 0,"", True)
gen.add("bypass_behavior", bool_t, 0,"", False)
grp_planner_setup = gen.add_group("planner_setup", type="tab")
grp_planner_setup.add("via_points_speed_linear_ratio", double_t, 0,"", 1.5, 1.0, 2.0)
grp_robot = gen.add_group("robot", type="tab")
grp_robot.add("wheelbase", double_t, 0,"", 2.7, 1.0, 4.5)
grp_robot.add("min_turning_radius", double_t, 0,"", 10.4, 10.0, 12.1)
grp_robot.add("max_vel_y", double_t, 0,"", 0.0, 0.0, 0.0)
grp_robot.add("acc_lim_theta", double_t, 0,"", 0.05, 0.005, 1.5)
grp_robot.add("acc_lim_x", double_t, 0,"", 0.2, 0.1, 5.0)
grp_robot.add("max_vel_x_backwards", double_t, 0,"", 0.01, 3.0, 0.001)
grp_robot.add("cmd_angle_instead_rotvel", bool_t, 0,"", True)
grp_teb_setup = gen.add_group("teb_setup", type="tab")
grp_teb_setup.add("homotopy_enabled", bool_t, 0,"", False)
grp_teb_trajectory = gen.add_group("teb_trajectory", type="tab")
grp_teb_trajectory.add("dt_ref", double_t, 0,"", 1.0, 0.2, 2.0)
grp_teb_trajectory.add("dt_hysteresis", double_t, 0,"", 0.1, 0.01, 0.5)
grp_teb_trajectory.add("min_obstacle_distance", double_t, 0,"", 0.5, 0.2, 3.0)
grp_teb_trajectory.add("inflation_distance", double_t, 0,"", 0.6, 0.5, 3.1)
grp_teb_trajectory.add("xy_goal_tolerance", double_t, 0,"", 0.4, 0.01, 0.5)
grp_teb_trajectory.add("yaw_goal_tolerance", double_t, 0,"", 0.2, 0.01, 0.5)
grp_teb_weights = gen.add_group("teb_weights", type="tab")
grp_teb_weights.add("weight_obstacle", double_t, 0,"", 40.0, 5.0, 100.0)
grp_teb_weights.add("weight_viapoints", double_t, 0,"", 4.0, 1.0, 100.0)
grp_teb_weights.add("weight_optimaltime", double_t, 0,"", 1.0, 1.0, 100.0)
grp_teb_weights.add("weight_shortest_path", double_t, 0,"", 0.0, 0.0, 100.0)
grp_teb_weights.add("weight_kinematics_turning_radius", double_t, 0,"", 10.0, 2.0, 20.0)
grp_teb_weights.add("weight_kinematics_forward_drive", double_t, 0,"", 5.0, 2.0, 30.0)
grp_teb_weights.add("weight_kinematics_nh", double_t, 0,"", 1000.0, 100.0, 1100.0)
grp_teb_weights.add("weight_max_vel_x", double_t, 0,"", 0.0, 0.0, 10.0)
grp_teb_weights.add("weight_max_vel_y", double_t, 0,"", 0.0, 0.0, 10.0)
grp_teb_weights.add("penalty_epsilon", double_t, 0,"", 0.1, 0.01, 10.0)
grp_teb_weights.add("outer_iterations", int_t, 0,"", 5,1,15)
grp_teb_weights.add("inner_iterations", int_t, 0,"", 4,1,15)
exit(gen.generate("hotaru_planner_node_teb", "HotaruTebLocalPlannerNode", "HotaruTebLocalPlannerNode"))
